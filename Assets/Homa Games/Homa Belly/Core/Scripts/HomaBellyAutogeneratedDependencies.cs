using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;

namespace HomaGames.HomaBelly
{
    public partial class HomaBellyAutogeneratedDependencies
    {
        private static readonly List<IMediator> mediators = new List<IMediator>();
        private static readonly List<IAttribution> attributions = new List<IAttribution>();
        private static readonly List<IAnalytics> analytics = new List<IAnalytics>();

        public static List<IMediator> Mediators => mediators;

        public static List<IAttribution> Attributions => attributions;

        public static List<IAnalytics> Analytics => analytics;

        [MenuItem("Tools/Homa Belly/Generate Dependencies")]
        //[InitializeOnLoadMethod]
        private static void AutoGenerateCode()
        {
            GenerateMediators();
        }

        private static void GenerateMediators()
        {
            string parentFolder = "Assets/Homa Games/Homa Belly/Core/Scripts/";
            string fileName = "HomaBellyAutogeneratedDependenciesMediators";
            string completeFilePath = $"{parentFolder}{fileName}.cs";
            if (!File.Exists(completeFilePath))
            {
                File.Create(completeFilePath);
            }
            File.WriteAllText(completeFilePath,string.Empty);
            
            List<Type> availableMediators = Reflection.GetHomaBellyAvailableClasses(typeof(IMediator));
            
            if (availableMediators != null && availableMediators.Count > 0)
            {
                using ( StreamWriter streamWriter = new StreamWriter( completeFilePath ) )
                {
                    streamWriter.WriteLine($"namespace HomaGames.HomaBelly");
                    streamWriter.WriteLine("{");
                    streamWriter.WriteLine($"public partial class {typeof(HomaBellyAutogeneratedDependencies)}");
                    streamWriter.WriteLine("{");
                    streamWriter.WriteLine( "public void InitializeMediators()");
                    streamWriter.WriteLine( "{" );
                    foreach (Type type in availableMediators)
                    {
                        streamWriter.WriteLine($"\t mediators.Add(new {type}());");
                    }
                    streamWriter.WriteLine( "}" );
                    streamWriter.WriteLine("}");
                    streamWriter.WriteLine("}");
                }
            }
            else
            {
                HomaGamesLog.Warning("No available mediators found");
            }
            
            AssetDatabase.Refresh();
        }
    }
}